import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
plt.rcParams.update({'figure.max_open_warning': 0})
from matplotlib.backends.backend_pdf import PdfPages
plt.style.use('ggplot')

def load_dat(path): #given an excel file at the location 'path', loads it and converts it to useable python object
    apd = pd.read_excel(path) #opens file in pandas file format
    anu = apd.to_numpy() #converts to numpy array
    
    col_names = list(apd.columns)
    return anu,col_names #returns the data (anu), and the titles of every column of the array, which corresponds to a question

def dept2dist(dept): #given a department, returns which district it's in. Uses excel files I made with lists of department names
    tandon = sum(pd.read_excel("tandon.xlsx").to_numpy()==dept)
    stem = sum(pd.read_excel("stem.xlsx").to_numpy()==dept)
    ssh = sum(pd.read_excel("ssh.xlsx").to_numpy()==dept)
    stein = sum(pd.read_excel("steinhardt.xlsx").to_numpy()==dept)
    prof = sum(pd.read_excel("profschools.xlsx").to_numpy()==dept)
    
    if tandon:
        return "Tandon"
    elif stem:
        return "STEM"
    elif ssh:
        return "SSH"
    elif stein:
        return "Steinhardt"
    elif prof:
        return "Prof. Schools"
    else:
        return "Other"

def demo_info(data): #pulls all the demographic info, takes in the data array generated by load_dat()
    demo_data = data[:,0:22]

    n_nums = demo_data[:,1]
    emails = demo_data[:,2]
    n_years = demo_data[:,3]
    prog = demo_data[:,4]
    dept = demo_data[:,5]
    
    ifnot_dept = demo_data[:,6]
    dept[dept=="***Not Listed***"] = ifnot_dept[dept=="***Not Listed***"]

    dept_emp = demo_data[:,7]
    ifnot_dept_emp = demo_data[:,8]
    dept_emp[dept_emp=="***Not Listed***"] = ifnot_dept_emp[dept_emp=="***Not Listed***"]

    job = demo_data[:,9]
    if_int = demo_data[:,10]
    if_dif = demo_data[:,11]
    age = demo_data[:,12]
    race = demo_data[:,13]
    gend = demo_data[:,14]
    if_trans = demo_data[:,15]
    sex_orient = demo_data[:,16]
    if_notsingle = demo_data[:,17]
    immig = demo_data[:,18]
    dep = demo_data[:,19]
    paysource = demo_data[:,20]
    commute = demo_data[:,21]

    return gend,dept,if_int,prog,paysource,race #these are some demographic information pieces we want to use. Can ask to pull others if need be

def getpage(n): #returns relevant columns for a given page (first,last inclusive)
    if n==3:
        return 22,29
    elif n==4:
        return 30,36
    elif n==5:
        return 37,42
    elif n==6:
        return 43,53
    elif n==7:
        return 54,61
    elif n==8:
        return 62,69
    elif n==9:
        return 70,77
    elif n==10:
        return 78,105
    elif n==11:
        return 106,112
    elif n==12:
        return 113,120
    elif n==13:
        return 114
    else:
        print("page number requested is either not present in data, or isn't one of the ones we're supposed to be analyzing >:( \n")

def convert_to_nums(column): #for a column with "not important ... gotta have it" answers, converts them to 1-5
    n = len(column)
    out = np.zeros(n)
    for i in range(n):
        if column[i] == "Not important":
            out[i] = 1
        elif column[i] == "Not too important":
            out[i] = 2
        elif column[i] == "Important":
            out[i] = 3
        elif column[i] == "Very important":
            out[i] = 4
        elif column[i] == "Gotta have it":
            out[i] = 5
        else:
            out[i] = float("nan")
    return out #returns the column with numerical components instead of strings

def pageres(page,data): #converts a whole page of the survey to numbers, column by column
    npeeps = len(data[:,1])
    start,stop = getpage(page)
    cols = range(start,stop+1)
    res = np.zeros((npeeps,len(cols)))
    for i in range(len(cols)):
        res[:,i] = convert_to_nums(data[:,cols[i]])
        
    return res 

def most_important(pagenum,pageres): #given a page of data, returns which question on the page is the most important to people
    tot_resp = sum(res,0) #adds up all the responses for each column
    maxloc = where(tot_resp==max(tot_resp)) #finds column with highest total response
    start,stop = getpage(pagenum)
    maxloc_fin = start+maxloc

    return maxloc_fin #this number can be used to get the question by calling col_names[maxloc_fin], where col_names is the second output of the load_dat() function

def most_divisive(pagenum,pageres): #same thing as above, but returns the question with the highest standard deviation. I think there can be improvements in this metric...
    std_resp = std(res,0) #standard deviation of the responses for each column
    maxloc = where(tot_resp==max(tot_resp)) #finds column with highest total response
    start,stop = getpage(pagenum)
    maxloc_fin = start+maxloc

    return maxloc_fin

def makeplots(dat,boolfilt,name):
    fdat = dat[boolfilt==1,:]
    mn = np.nanmean(fdat)
    nq = sum(np.logical_not(np.isnan(fdat[1,:])))
    xv = []
    for i in range(nq):
        xv = np.append(xv,"Q"+str(i+1))
    
    ind = list(range(nq))

    plt.figure()
    plt.subplot(211)
    plt.bar(ind,mn)
    plt.xticks(ind,xv)
    plt.title('Average interest, '+name+' students')

    ikeep = np.logical_not(np.isnan(fdat[1,:]))
    fdat = fdat[:,ikeep]
    dat2 = [sum(fdat==1,0),sum(fdat==2,0),sum(fdat==3,0),sum(fdat==4,0),sum(fdat==5,0)]
    plt.subplot(212)
    plot_stacked_bar(dat2,category_labels=xv)
    plt.title('all responses, '+name+' students')
    plt.tight_layout()



def plot_stacked_bar(data, category_labels=None, 
                     show_values=False, value_format="{}", y_label=None, 
                     grid=True, reverse=False):
    ny = len(data[0])
    ind = list(range(ny))

    axes = []
    cum_size = np.zeros(ny)

    data = np.array(data)

    if reverse:
        data = np.flip(data, axis=1)
        category_labels = reversed(category_labels)

    for i, row_data in enumerate(data):
        axes.append(plt.bar(ind, row_data, bottom=cum_size))
        cum_size += row_data

    plt.xticks(ind, category_labels)

    #if y_label:
    #    plt.ylabel(y_label)

    #plt.legend()

    #if grid:
    #    plt.grid()

def final_script(path):
    all_data,all_col_names = load_dat(path)
    gend,dept,ifint,prog,pay,race = demo_info(all_data)
    distr = group_depts(dept)
    

    # First page we analyze: page 3
    res3 = pageres(3,all_data)
    
    # All students
    makeplots(res3,np.ones(gend.shape),"All")
    plt.savefig('results/p3all.eps')
    plt.close('all')
    # non-doctoral students
    makeplots(res3,prog=="Master's","Master's")
    plt.savefig('results/p3mast.eps')
    plt.close('all')
    # non-doctoral international students
    makeplots(res3,(prog=="Master's")*(ifint=="Yes"),"International Master's") #Currently there are 0 people in this category
    plt.savefig('results/p3intmast.eps')
    plt.close('all')

    # Next, analyze page 4
    res4 = pageres(4,all_data)

    # All students
    makeplots(res4,np.ones(gend.shape),"All")
    plt.savefig('results/p4all.eps')
    plt.close('all')
    # non fully-funded students
    makeplots(res4,pay!="'Stipend/tuition waiver","Non fully-funded")
    plt.savefig('results/p4notfund.eps')
    plt.close('all')
    # international students
    makeplots(res4,(ifint=="Yes"),"International")
    plt.savefig('results/p4int.eps')
    plt.close('all')
    # male students
    makeplots(res4,(gend=="Man"),"Male")
    plt.savefig('results/p4men.eps')
    plt.close('all')
    # female students
    makeplots(res4,(gend=="Woman"),"Female")
    plt.savefig('results/p4women.eps')
    plt.close('all')
    # stem students
    makeplots(res4,(distr=="STEM"),"STEM")
    plt.savefig('results/p4stem.eps')
    plt.close('all')
    # ssh students
    makeplots(res4,(distr=="SSH"),"SSH")
    plt.savefig('results/p4ssh.eps')
    plt.close('all')
    # profschool students
    makeplots(res4,(distr=="Prof. Schools"),"Prof. Schools")
    plt.savefig('results/p4prof.eps')
    plt.close('all')
    # tandon students
    makeplots(res4,(distr=="Tandon"),"Tandon")
    plt.savefig('results/p4tandon.eps')
    plt.close('all')
    # steinhardt students
    makeplots(res4,(distr=="Steinhardt"),"Steinhardt")
    plt.savefig('results/p4steinhardt.eps')
    plt.close('all')

    # Next, analyze page 11
    res11 = pageres(11,all_data)

    # All students
    makeplots(res11,np.ones(gend.shape),"All")
    plt.savefig('results/p11all.eps')
    plt.close('all')
    # international students
    makeplots(res11,ifint=="Yes","International")
    plt.savefig('results/p11int.eps')
    plt.close('all')
    # non-funded international students
    makeplots(res11,(pay!="Stipend/tuition waiver")*(ifint=="Yes"),"Non fully-funded international")
    plt.savefig('results/p11intnotfund.eps')
    plt.close('all')


def analyze_page_generic(pagenum,path,titlestr): #performs full analysis on one page of questions. Takes in the page number, the path to the data file, and the title of the output file. saves the data as a pdf in that location. 
    all_data,all_col_names = load_dat(path)
    gend,dept,ifint,prog = demo_info(all_data)
    distr = group_depts(dept)
    results = pageres(pagenum,all_data)
    
    start,stop = getpage(pagenum)
    col_names = all_col_names[start:(stop+1)]
    ncol = len(range(start,stop+1))
    pp = PdfPages(titlestr)
    plt.text(.5,.5,"Page "+str(pagenum),
          bbox={'facecolor':'white','alpha':1,'edgecolor':'none','pad':1},
          ha='center', va='center',wrap=True)
    plt.axis('off')
    for i in range(ncol):
        fig = plt.figure()
        colres = results[:,i]
        if not np.isnan(sum(colres)):
            yvals = [sum(colres==i) for i in range(1,6)]
            plt.bar([1,2,3,4,5],yvals,tick_label = np.array(["Not imp.","Not too imp.","Imp.","Very imp.","Gotta"])) #bar plots for each question
            plt.title(col_names[i],wrap=True)
            pp.savefig(fig)
        
    tot_resp = np.mean(results,0)
    std_resp = np.std(results,0)
    keep = (np.logical_not(np.isnan(tot_resp)))

    fig = plt.figure()
    plt.plot(range(1,sum(keep)+1),tot_resp[keep],".") #plots average interest for all the questions
    plt.xticks(list(range(1,sum(keep)+1)))
    plt.title('Average interest per question on page')
    pp.savefig(fig)
    
    fig = plt.figure()
    plt.plot(range(1,sum(keep)+1),std_resp[keep],".") #same thing as above, with standard deviation
    plt.xticks(list(range(1,sum(keep)+1)))
    plt.title('Divisiveness of questions on page')
    pp.savefig(fig)

   # fig = plt.figure()
   # plt.plot(range(1,sum(keep)+1),std_resp[keep]/tot_resp[keep],".") #same thing as above, with normalized standard deviation
   # plt.xticks(list(range(1,sum(keep)+1)))
   # plt.title('Divisiveness of questions on page')
   # pp.savefig(fig)

    fig = plt.figure()
    ssh = (distr=="SSH")
    stem = (distr=="STEM")
    stein = (distr=="Steinhardt")
    tandon = (distr=="Tandon")
    prof = (distr=="Prof. Schools")
    other = (distr=="Other")
    yvals = [np.nansum(results[ssh,:]),np.nansum(results[stem,:]),np.nansum(results[stein,:]),np.nansum(results[tandon,:]),np.nansum(results[prof,:]),np.nansum(results[other,:])]
    plt.bar([1,2,3,4,5,6],yvals,tick_label = np.array(["SSH","STEM","Steinhardt","Tandon","Prof. Schools","Other"]))
    plt.title('Total interest per district')
    pp.savefig(fig)

    fig = plt.figure()
    yvals2 = [sum(ssh),sum(stem),sum(stein),sum(tandon),sum(prof),sum(other)]
    plt.bar([1,2,3,4,5,6],yvals2,tick_label = np.array(["SSH","STEM","Steinhardt","Tandon","Prof. Schools","Other"]))
    plt.title('Total participation per district')
    pp.savefig(fig)
    
    fig = plt.figure()
    plt.bar([1,2,3,4,5,6],np.array(yvals)/np.array(yvals2),tick_label = np.array(["SSH","STEM","Steinhardt","Tandon","Prof. Schools","Other"]))
    plt.title('interest / participation per district')
    pp.savefig(fig)
    
    plt.close('all')
    pp.close()    

def group_depts(depts):
    out = depts.copy()

    for i in range(len(depts)):
        out[i] = dept2dist(depts[i]) #converts departments to districts, by calling the dept2dist() function from above

    return out

def analyze_question_generic(pagenum,qnum,titlestr,path): #Once a specific question is identified as divisive, this performs some demographic analysis on it. Takes page number, question number on that page, name of the save location, and the path to the data file
    all_data,all_col_names = load_dat(path)
    gend,dept,ifint,prog = demo_info(all_data) #If you want to use other demographic info, just pull different arrays in the demo_info() function above!
    distr = group_depts(dept)
    results = pageres(pagenum,all_data)
    
    start,stop = getpage(pagenum)
    col_names = all_col_names[start:(stop+1)]
    ncol = len(range(start,stop+1))
    pp = PdfPages(titlestr)
 
    this_col = results[:,qnum-1]
    name = col_names[qnum-1]
    
    fig = plt.figure()
    plt.text(.5,.5,name,
          bbox={'facecolor':'white','alpha':1,'edgecolor':'none','pad':1},
          ha='center', va='center',wrap=True)
    plt.axis('off')
    pp.savefig(fig)

    fig = plt.figure() #gender breakdown. For now... binary
    m = this_col[(gend=="Man")]
    f = this_col[(gend=="Woman")]
    o = this_col[np.array(np.ones(gend.shape)-(gend=="Man")-(gend=="Woman"),dtype=bool)]
    plt.boxplot([m,f,o],labels=["Man","Woman","Non-binary"])
    plt.title("Importance by gender (coarse)")
    pp.savefig(fig)

    fig = plt.figure() #district breakdown
    ssh = this_col[(distr=="SSH")]
    stem = this_col[(distr=="STEM")]
    stein = this_col[(distr=="Steinhardt")]
    tandon = this_col[(distr=="Tandon")]
    prof = this_col[(distr=="Prof. Schools")]
    other = this_col[(distr=="Other")]
    plt.boxplot([ssh,stem,stein,tandon,prof,other],labels=["SSH","STEM","Steinhardt","Tandon","Prof. Schools","Other"])
    plt.title("Importance by district")
    pp.savefig(fig)

    fig = plt.figure() #breakdown by international student or not
    plt.boxplot([this_col[ifint=="Yes"],this_col[ifint=="No"]],labels=["International","Domestic"])
    plt.title("Importance by nationality")
    pp.savefig(fig)

    fig = plt.figure() #breakdown by program
    plt.boxplot([this_col[prog=="PhD"],this_col[prog=="Master's"]],labels=["PhD","Masters"])
    plt.title("Importance by program type")
    pp.savefig(fig)
    plt.close('all')

    #You can add more code like the above sections, to generate plots of more demographic breakdowns, just make sure to pull the data using demo_info()
    pp.close()


def scripty(path): #just a script for me
    print("Pagewise analysis...\n")
    #Analyze all non optional pages and put output in the results folder
    pages = [3,4,11]
    for p in pages:
        analyze_page_generic(p,path,"results/page"+str(p)+".pdf")
    
    print("Question analysis...\n")
    #Change this as you desire: specific questions to be analyzed
    pages = [3,3,4,4]
    questions = [2,6,1,3]
    for i in range(len(pages)):
        analyze_question_generic(pages[i],questions[i],"results/p"+str(pages[i])+"q"+str(questions[i])+".pdf",path)

    print("Done!\n")
